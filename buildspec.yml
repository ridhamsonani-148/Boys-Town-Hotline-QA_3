version: 0.2

# Boys Town Hotline QA - Simplified CodeBuild Deployment
# This buildspec works with the deploy.sh script
# Security Note: Sensitive information like GitHub tokens and AWS account details are redacted from CloudWatch logs

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - echo "üöÄ Boys Town Hotline QA Deployment Started"
      - echo "Installing AWS CDK CLI..."
      - npm install -g aws-cdk@latest
      - echo "Installing project dependencies..."
      - npm install

  pre_build:
    commands:
      - echo "üìã Pre-build phase started on $(date)"
      - echo "Checking AWS CLI configuration..."
      - aws sts get-caller-identity --query 'Account' --output text > /dev/null 2>&1 && echo "‚úÖ AWS CLI configured" || (echo "‚ùå AWS CLI not configured" && exit 1)
      - echo ""
      - echo "üìã Environment Configuration:"
      - echo "COMPANY_NAME:$COMPANY_NAME"
      - echo "GITHUB_OWNER:$GITHUB_OWNER"
      - echo "GITHUB_REPO:$GITHUB_REPO"
      - echo "GITHUB_TOKEN_SECRET:[REDACTED]"
      - echo "AWS_REGION:$AWS_REGION"
      - echo "ACTION:$ACTION"
      - echo ""
      - echo "üì¶ Building TypeScript project..."
      - npm run build
      - echo "‚úÖ TypeScript build completed"

  build:
    commands:
      - echo "üèóÔ∏è  Build phase started on $(date)"
      - echo "Setting up CDK environment..."
      - ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
      - echo "Account:[REDACTED], Region:$AWS_REGION"
      
      - echo "üîß Checking CDK bootstrap status..."
      - |
        if ! aws cloudformation describe-stacks --stack-name CDKToolkit --region $AWS_REGION > /dev/null 2>&1; then
          echo "üîß Bootstrapping CDK..."
          cdk bootstrap aws://$ACCOUNT/$AWS_REGION
        else
          echo "‚úÖ CDK already bootstrapped"
        fi
      
      - echo "üîê Validating GitHub token secret..."
      - |
        if ! aws secretsmanager describe-secret --secret-id "$GITHUB_TOKEN_SECRET" --region "$AWS_REGION" > /dev/null 2>&1; then
          echo "‚ùå ERROR: GitHub token secret not found"
          echo "This should have been created by the deploy.sh script"
          exit 1
        fi
        echo "‚úÖ GitHub token secret validated"
      
      - |
        if [ "$ACTION" = "destroy" ]; then
          echo "üóëÔ∏è  Destroying Boys Town Hotline QA system..."
          echo "Destroying main application stack..."
          cdk destroy HotlineQaStack-prod \
            --context envName=prod \
            --context bucketNamePrefix=${COMPANY_NAME}-hotline-qa \
            --context deployFrontend=true \
            --context githubOwner=$GITHUB_OWNER \
            --context githubRepo=$GITHUB_REPO \
            --context githubTokenSecretName=$GITHUB_TOKEN_SECRET \
            --force || echo "Stack may not exist or already destroyed"
          
          echo "üóëÔ∏è  Cleaning up GitHub token secret..."
          aws secretsmanager delete-secret \
            --secret-id "$GITHUB_TOKEN_SECRET" \
            --region "$AWS_REGION" \
            --force-delete-without-recovery || echo "Secret may not exist"
          
          echo "‚úÖ Destroy process completed"
        else
          echo "üöÄ Deploying Boys Town Hotline QA system..."
          echo "This will take 10-15 minutes to complete..."
          
          cdk deploy HotlineQaStack-prod \
            --context envName=prod \
            --context bucketNamePrefix=${COMPANY_NAME}-hotline-qa \
            --context deployFrontend=true \
            --context githubOwner=$GITHUB_OWNER \
            --context githubRepo=$GITHUB_REPO \
            --context githubTokenSecretName=$GITHUB_TOKEN_SECRET \
            --require-approval never
          
          echo "‚úÖ Deployment completed successfully!"
        fi

  post_build:
    commands:
      - echo "üìã Post-build phase started on $(date)"
      - |
        if [ "$ACTION" = "deploy" ]; then
          echo "üìä Deployment Summary:"
          echo "======================"
          echo ""
          echo "üîó CloudFormation Stack Outputs:"
          echo "Note: The following outputs contain deployment URLs and endpoints"
          aws cloudformation describe-stacks \
            --stack-name HotlineQaStack-prod \
            --region $AWS_REGION \
            --query 'Stacks[0].Outputs' \
            --output table || echo "Stack outputs not available yet"
          
          echo ""
          echo "üéâ Boys Town Hotline QA System Deployed Successfully!"
          echo ""
          echo "üìã What was deployed:"
          echo "‚úÖ S3 bucket for audio files and results"
          echo "‚úÖ Lambda functions for processing pipeline"
          echo "‚úÖ Step Functions workflow orchestration"
          echo "‚úÖ DynamoDB tables for counselor data"
          echo "‚úÖ API Gateway for REST endpoints"
          echo "‚úÖ Amplify frontend application"
          echo "‚úÖ Transcribe Call Analytics integration"
          echo "‚úÖ Bedrock AI analysis capabilities"
          echo ""
          echo "üìã Next Steps:"
          echo "1. Access your frontend via the Amplify URL (shown above)"
          echo "2. Test API endpoints using the API Gateway URL"
          echo "3. Upload test audio files (.wav format) to S3 bucket 'records/' folder"
          echo "4. Monitor processing in Step Functions console"
          echo "5. View results in DynamoDB tables and frontend interface"
          echo ""
          echo "üîó Management Console URLs:"
          echo "CloudFormation: https://console.aws.amazon.com/cloudformation/home?region=$AWS_REGION"
          echo "Step Functions: https://console.aws.amazon.com/states/home?region=$AWS_REGION"
          echo "API Gateway: https://console.aws.amazon.com/apigateway/home?region=$AWS_REGION"
          echo "Amplify: https://console.aws.amazon.com/amplify/home?region=$AWS_REGION"
        else
          echo "üóëÔ∏è  Destruction completed successfully!"
          echo "All AWS resources have been removed."
        fi
      
      - echo "üìã CDK $ACTION process completed on $(date)"

artifacts:
  files:
    - '**/*'
  base-directory: 'cdk.out'
  name: boys-town-hotline-qa-artifacts

cache:
  paths:
    - 'node_modules/**/*'
    - 'frontend/node_modules/**/*'
